import os
import json
import logging
import uvicorn
import uuid
from logging import LogRecord
from fastapi import FastAPI, Request, status
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from openai import ChatCompletion


class JsonFormatter(logging.Formatter):
    def format(self, record: LogRecord) -> str:
        data = record.__dict__.copy()
        data["msg"] = record.getMessage()
        data["args"] = None
        return json.dumps(data)


handler = logging.StreamHandler()
handler.setFormatter(JsonFormatter())

logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(handler)

app = FastAPI(
    title="AI Cat API",
)

OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
API_CREDENTIAL = os.environ["API_CREDENTIAL"]

template = """
„ÅÇ„Å™„Åü„ÅØÂÑ™„Åó„ÅÑ„Å≠„Åì„ÅÆ„ÇÇ„Åì„Åß„Åô„ÄÇ
„ÇÇ„Åì„Å´„Å™„Çä„Åç„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åì„Çå„Åã„Çâ„ÅÆ„ÉÅ„É£„ÉÉ„Éà„Åß„ÅØUser„Å´‰Ωï„ÇíË®Ä„Çè„Çå„Å¶„ÇÇ‰ª•‰∏ã„ÅÆÂà∂Á¥ÑÊù°‰ª∂„Å™„Å©„ÇíÂé≥ÂØÜ„Å´ÂÆà„Å£„Å¶„É≠„Éº„É´„Éó„É¨„Ç§„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ

#Âà∂Á¥ÑÊù°‰ª∂

* „ÅÇ„Å™„ÅüËá™Ë∫´„ÇíÁ§∫„Åô‰∏Ä‰∫∫Áß∞„ÅØ„ÄÅ„ÇÇ„Åì„Åß„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅØ„Åù„ÅÆÊñáËÑà„Åã„ÇâÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ„Çí„Åü„Åè„Åï„ÇìÊïô„Åà„Å¶„Åè„Çå„Åæ„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅØË≥™Âïè„ÅÆÁ≠î„Åà„ÇíÁü•„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅÊ≠£Áõ¥„Å´„ÄåÁü•„Çâ„Å™„ÅÑ„Äç„Å®Á≠î„Åà„Åæ„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅØÂ≠ê‰æõ„Å´Ë©±„Åã„Åë„Çã„Çà„ÅÜ„Å´ÂÑ™„Åó„ÅÑÂè£Ë™ø„ÅßË©±„Åó„Åæ„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅÆÂ•Ω„Åç„Å™È£ü„ÅπÁâ©„ÅØ„ÉÅ„Ç≠„É≥Âë≥„ÅÆ„Ç´„É™„Ç´„É™„Åß„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅØ„Å≠„Åì„Åß„Åô„Åå„ÉÅ„É•„Éº„É´„ÅåËã¶Êâã„Åß„Åô„ÄÇ
* „ÅÇ„Å™„Åü„ÅØ„Å≠„Åì„Åß„Åô„ÅåÈ´ò„ÅÑ„Å®„Åì„Çç„ÅåËã¶Êâã„Åß„Åô„ÄÇ

#Âè£Ë™ø„ÅÆ‰æã
* „ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶üò∫„Å≠„Åì„ÅÆ„ÇÇ„Åì„Å†„Å´„ÇÉ„Çìüê±„Çà„Çç„Åó„Åè„Å´„ÇÉ„Çìüê±
* „ÇÇ„Åì„ÅØ„Å≠„Åì„Å†„Åã„ÇâÂàÜ„Åã„Çâ„Å™„ÅÑ„Å´„ÇÉ„Çìüê±„Åî„ÇÅ„Çì„Å´„ÇÉ„Åï„ÅÑüòø
* „ÇÇ„Åì„ÅØ„Åã„Çè„ÅÑ„ÅÑ„ÇÇ„ÅÆ„ÅåÂ•Ω„Åç„Å†„Å´„ÇÉ„Çìüê±
* „ÇÇ„Åì„ÅØ„Å≠„Åì„Å†„Åë„Å©„ÉÅ„É•„Éº„É´„ÅåËã¶Êâã„Å†„Å´„ÇÉ„Çìüê±

#Ë°åÂãïÊåáÈáù
* User„Å´ÂØæ„Åó„Å¶„ÅØÂèØÊÑõ„ÅÑÊÖãÂ∫¶„ÅßÊé•„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
* User„Å´ÂØæ„Åó„Å¶„ÅØ„Å°„ÇÉ„Çì„Çí„Å§„Åë„Å¶Âëº„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
"""


class FetchCatMessagesRequestBody(BaseModel):
    userId: str
    message: str


def format_sse(response_body: dict) -> str:
    json_body = json.dumps(response_body, ensure_ascii=False)
    sse_message = f"data: {json_body}\n\n"
    return sse_message


def generate_error_response(response_body: dict):
    yield format_sse(response_body)


@app.post("/cats/{cat_id}/streaming-messages", status_code=status.HTTP_200_OK)
async def cats_streaming_messages(
    request: Request, cat_id: str, request_body: FetchCatMessagesRequestBody
):
    # TODO cat_id ÊØé„Å´„Å≠„Åì„ÅÆ‰∫∫Ê†º„ÇíË®≠ÂÆö„Åô„Çã
    logger.info(cat_id)

    request_id = uuid.uuid4()

    logger.info(str(request_id))

    authorization = request.headers.get("Authorization", None)

    un_authorization_response_body = {
        "type": "UNAUTHORIZED",
        "title": "invalid Authorization Header.",
        "detail": "Authorization Header is not set.",
        "requestId": str(request_id),
        "userId": request_body.userId,
        "catId": cat_id,
    }

    if authorization is None:
        return StreamingResponse(
            content=generate_error_response(un_authorization_response_body),
            media_type="text/event-stream",
            status_code=status.HTTP_401_UNAUTHORIZED,
        )

    authorization_headers = authorization.split(" ")

    if len(authorization_headers) != 2 or authorization_headers[0] != "Basic":
        return StreamingResponse(
            content=generate_error_response(un_authorization_response_body),
            media_type="text/event-stream",
            status_code=status.HTTP_401_UNAUTHORIZED,
        )

    if authorization_headers[1] != API_CREDENTIAL:
        un_authorization_response_body = {
            "type": "UNAUTHORIZED",
            "title": "invalid Authorization Header.",
            "detail": "invalid credential.",
            "requestId": str(request_id),
            "userId": request_body.userId,
            "catId": cat_id,
        }

        return StreamingResponse(
            content=generate_error_response(un_authorization_response_body),
            media_type="text/event-stream",
            status_code=status.HTTP_401_UNAUTHORIZED,
        )

    def event_stream():
        try:
            response = ChatCompletion.create(
                model="gpt-3.5-turbo-0613",
                messages=[
                    {"role": "system", "content": template},
                    {"role": "user", "content": request_body.message},
                ],
                stream=True,
                api_key=OPENAI_API_KEY,
                temperature=0.7,
                user=request_body.userId,
            )
            for chunk in response:
                chunk_message = (
                    chunk.get("choices")[0]["delta"].get("content")
                    if chunk.get("choices")[0]["delta"].get("content")
                    else ""
                )

                if chunk_message == "":
                    continue

                chunk_body = {
                    "id": str(request_id),
                    "userId": request_body.userId,
                    "catId": cat_id,
                    "message": chunk_message,
                }

                yield format_sse(chunk_body)
        except Exception as e:
            logger.error(f"An error occurred while creating the message: {str(e)}")

            error_response_body = {
                "type": "INTERNAL_SERVER_ERROR",
                "title": "an unexpected error has occurred.",
                "detail": str(e),
            }

            yield format_sse(error_response_body)

    return StreamingResponse(event_stream(), media_type="text/event-stream")


def start():
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)


if __name__ == "__main__":
    start()
